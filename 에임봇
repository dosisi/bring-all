-- 실행기에서 실행 가능한 Lua 스크립트
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- 1인칭 고정
LocalPlayer.CameraMode = Enum.CameraMode.LockFirstPerson

-- UI 만들기 (화면 중앙 원 테두리)
local ScreenGui = Instance.new("ScreenGui", game.CoreGui)
local Circle = Instance.new("Frame", ScreenGui)

Circle.Size = UDim2.new(0, 400, 0, 400) -- FOV 400 크기
Circle.Position = UDim2.new(0.5, -200, 0.5, -200) -- 화면 중앙 (400/2 = 200)
Circle.BackgroundTransparency = 1 -- 내부 투명
Circle.ZIndex = 10
Circle.Visible = true

-- 둥근 테두리 만들기
local UICorner = Instance.new("UICorner", Circle)
UICorner.CornerRadius = UDim.new(1, 0) -- 원 모양 유지

-- 테두리 추가
local UIStroke = Instance.new("UIStroke", Circle)
UIStroke.Thickness = 2 -- 테두리 두께 (얇게 조정)
UIStroke.Color = Color3.new(1, 0, 0) -- 빨간색 테두리
UIStroke.Transparency = 0 -- 완전 보이게 설정

-- 현재 타겟 고정 변수
local lockedTarget = nil
local isRightClicking = false -- 우클릭 상태 감지 변수

-- 벽 뒤에 있는지 확인하는 함수
local function IsTargetVisible(target)
    local origin = Camera.CFrame.Position
    local direction = (target.Position - origin).unit * (target.Position - origin).magnitude
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {LocalPlayer.Character} -- 자신의 캐릭터 제외
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = workspace:Raycast(origin, direction, raycastParams)

    if raycastResult and raycastResult.Instance then
        if raycastResult.Instance:IsDescendantOf(target.Parent) then
            return true -- 타겟이 벽 뒤에 있지 않음
        else
            return false -- 벽에 막혀 있음
        end
    end
    return true
end

-- 가장 가까운 플레이어 찾기 (FOV 400 안에 있고 벽 너머가 아닐 때만)
local function GetClosestPlayerInFOV()
    local closestPlayer = nil
    local shortestDistance = math.huge
    local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    local fovRadius = 200 -- 반지름 (FOV 400 크기의 원이므로 400/2)

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local head = player.Character.Head
            local headPosition, onScreen = Camera:WorldToViewportPoint(head.Position)

            if onScreen then
                local distanceFromCenter = (Vector2.new(headPosition.X, headPosition.Y) - screenCenter).magnitude
                if distanceFromCenter <= fovRadius then
                    if IsTargetVisible(head) then -- 벽 너머가 아닐 때만
                        local dist = (head.Position - Camera.CFrame.Position).magnitude
                        if dist < shortestDistance then
                            closestPlayer = head
                            shortestDistance = dist
                        end
                    end
                end
            end
        end
    end

    return closestPlayer
end

-- 우클릭 상태 감지
UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        isRightClicking = true
        -- 우클릭할 때 가장 가까운 플레이어에게 고정
        local target = GetClosestPlayerInFOV()
        if target then
            lockedTarget = target
        end
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        isRightClicking = false
    end
end)

-- 타겟을 계속 추적하며 고정
RunService.RenderStepped:Connect(function()
    if isRightClicking and lockedTarget then
        -- 고정된 플레이어가 벽 너머로 가면 고정 해제
        if not IsTargetVisible(lockedTarget) then
            lockedTarget = nil
        else
            -- 고정된 플레이어가 시야 안에 있고 우클릭이 활성화된 경우 카메라 고정
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, lockedTarget.Position)
        end
    elseif not isRightClicking then
        lockedTarget = nil -- 우클릭을 떼면 타겟 해제
    end
end)
